
// users

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    state VARCHAR(255) NULL,
    city VARCHAR(255) NULL,
    image_url VARCHAR(255) NULL,
    type ENUM('chef', 'customer') NOT NULL
);

//chefs

CREATE TABLE chefs (
    user_id INT PRIMARY KEY,
    bio TEXT NULL, 
    specialty VARCHAR(255) NULL,
    followers_count INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


//customers

CREATE TABLE customers (
    user_id INT PRIMARY KEY,
    following_count INT DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

//followers 

CREATE TABLE followers (
    customer_id INT NOT NULL,
    chef_id INT NOT NULL,
    PRIMARY KEY (customer_id, chef_id),
    FOREIGN KEY (customer_id) REFERENCES customers(user_id) ON DELETE CASCADE,
    FOREIGN KEY (chef_id) REFERENCES chefs(user_id) ON DELETE CASCADE
);



//orders

CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    chef_id INT NOT NULL,
    status ENUM('pending', 'confirmed', 'completed', 'canceled') DEFAULT 'pending',
    total DECIMAL(10, 2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES customers(user_id) ON DELETE CASCADE,
    FOREIGN KEY (chef_id) REFERENCES chefs(user_id) ON DELETE CASCADE
);

//order items

CREATE TABLE order_food (
    order_id INT NOT NULL,
    food_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 1,
    food_name VARCHAR(255) NOT NULL,
    food_price DECIMAL(10, 2) NOT NULL;
    PRIMARY KEY (order_id, food_id),
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (food_id) REFERENCES food_items(id) ON DELETE CASCADE
);



//food items 

CREATE TABLE food_items (
    id INT PRIMARY KEY AUTO_INCREMENT,
    chef_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT NULL,
    price DECIMAL(10,2) NOT NULL,
    image_url VARCHAR(255) NULL,
    FOREIGN KEY (chef_id) REFERENCES chefs(user_id) ON DELETE CASCADE
);



DELIMITER $$
CREATE TRIGGER update_order_total_after_insert
AFTER INSERT ON order_food
FOR EACH ROW
BEGIN
    
    UPDATE orders 
    SET total = (
        SELECT SUM(food_items.price * order_food.quantity)
        FROM order_food
        JOIN food_items ON order_food.food_id = food_items.id
        WHERE order_food.order_id = NEW.order_id
    )
    WHERE id = NEW.order_id;
END $$
DELIMITER;


DELIMITER $$

CREATE TRIGGER update_order_total_after_update
AFTER UPDATE ON order_food
FOR EACH ROW
BEGIN
    IF OLD.quantity != NEW.quantity THEN
        UPDATE orders 
        SET total = (
            SELECT SUM(food_items.price * order_food.quantity)
            FROM order_food
            JOIN food_items ON order_food.food_id = food_items.id
            WHERE order_food.order_id = NEW.order_id
        )
        WHERE id = NEW.order_id;
    END IF;
END $$

DELIMITER ;


DELIMITER $$

CREATE TRIGGER update_order_total_after_delete
AFTER DELETE ON order_food
FOR EACH ROW
BEGIN
    UPDATE orders 
    SET total = (
        SELECT SUM(food_items.price * order_food.quantity)
        FROM order_food
        JOIN food_items ON order_food.food_id = food_items.id
        WHERE order_food.order_id = OLD.order_id
    )
    WHERE id = OLD.order_id;
END $$

DELIMITER ;